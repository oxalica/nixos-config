From ffce3249f373dfc7f25b45cb99b3e7902df4dfcd Mon Sep 17 00:00:00 2001
From: oxalica <oxalicc@pm.me>
Date: Thu, 29 Aug 2024 12:55:30 -0400
Subject: [PATCH] caddyauth: use same cost for users and fake hash

This prevents timing attack when user provided hash is different than
the fake hash.
---
 modules/caddyhttp/caddyauth/basicauth.go | 32 +++++++++++++++++++-----
 modules/caddyhttp/caddyauth/hashes.go    |  6 ++---
 2 files changed, 28 insertions(+), 10 deletions(-)

diff --git a/modules/caddyhttp/caddyauth/basicauth.go b/modules/caddyhttp/caddyauth/basicauth.go
index 52a5a08c..8438c416 100644
--- a/modules/caddyhttp/caddyauth/basicauth.go
+++ b/modules/caddyhttp/caddyauth/basicauth.go
@@ -24,6 +24,7 @@ import (
 	"strings"
 	"sync"
 
+	"golang.org/x/crypto/bcrypt"
 	"golang.org/x/sync/singleflight"
 
 	"github.com/caddyserver/caddy/v2"
@@ -92,15 +93,11 @@ func (hba *HTTPBasicAuth) Provision(ctx caddy.Context) error {
 		return fmt.Errorf("hash is required")
 	}
 
-	// if supported, generate a fake password we can compare against if needed
-	if hasher, ok := hba.Hash.(Hasher); ok {
-		hba.fakePassword = hasher.FakeHash()
-	}
-
 	repl := caddy.NewReplacer()
 
 	// load account list
 	hba.Accounts = make(map[string]Account)
+	hashCost := 0
 	for i, acct := range hba.AccountList {
 		if _, ok := hba.Accounts[acct.Username]; ok {
 			return fmt.Errorf("account %d: username is not unique: %s", i, acct.Username)
@@ -126,10 +123,33 @@ func (hba *HTTPBasicAuth) Provision(ctx caddy.Context) error {
 			}
 		}
 
+                // FIXME: Only support bcrypt here.
+		curHashCost, err := bcrypt.Cost(acct.password)
+		if err != nil {
+			return fmt.Errorf("account %d: invalid bcrypt hash, must be a bcrypt-2a hash");
+		}
+		if hashCost != 0 && hashCost != curHashCost {
+			return fmt.Errorf("account %d: all bcrypt cost must be the same");
+		}
+		hashCost = curHashCost
+
 		hba.Accounts[acct.Username] = acct
 	}
 	hba.AccountList = nil // allow GC to deallocate
 
+	if hashCost == 0 {
+		// FIXME: Hardcoded default cost.
+		hashCost = 14;
+	}
+
+	// if supported, generate a fake password we can compare against if needed
+	if hasher, ok := hba.Hash.(Hasher); ok {
+		hba.fakePassword, err = hasher.FakeHash(hashCost)
+		if err != nil {
+			return fmt.Errorf("failed to generate fake hash");
+		}
+	}
+
 	if hba.HashCache != nil {
 		hba.HashCache.cache = make(map[string]bool)
 		hba.HashCache.mu = new(sync.RWMutex)
@@ -280,7 +300,7 @@ type Comparer interface {
 // can be used for timing side-channel mitigation.
 type Hasher interface {
 	Hash(plaintext []byte) ([]byte, error)
-	FakeHash() []byte
+	FakeHash(cost int) ([]byte, error)
 }
 
 // Account contains a username and password.
diff --git a/modules/caddyhttp/caddyauth/hashes.go b/modules/caddyhttp/caddyauth/hashes.go
index ce3df901..c02f5f27 100644
--- a/modules/caddyhttp/caddyauth/hashes.go
+++ b/modules/caddyhttp/caddyauth/hashes.go
@@ -53,10 +53,8 @@ func (BcryptHash) Hash(plaintext []byte) ([]byte, error) {
 }
 
 // FakeHash returns a fake hash.
-func (BcryptHash) FakeHash() []byte {
-	// hashed with the following command:
-	// caddy hash-password --plaintext "antitiming" --algorithm "bcrypt"
-	return []byte("$2a$14$X3ulqf/iGxnf1k6oMZ.RZeJUoqI9PX2PM4rS5lkIKJXduLGXGPrt6")
+func (BcryptHash) FakeHash(cost int) ([]byte, error) {
+        return bcrypt.GenerateFromPassword([]byte("antitiming"), cost)
 }
 
 // Interface guards
-- 
2.47.0

